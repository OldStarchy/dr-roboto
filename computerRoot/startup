if (settings ~= nil) then
	if (multishell ~= nil) then
		settings.set('bios.use_multishell', false)
		settings.save('.settings')
		os.reboot()
	end
end

dofile 'bootstrap.lua'

include 'Core/_main'
include 'UserFunctions/_main'

hud = Hud()
hud:start()

-- Colours
local promptColour, textColour, bgColour
if term.isColour() then
	promptColour = colours.yellow
	textColour = colours.white
	bgColour = colours.black
else
	promptColour = colours.white
	textColour = colours.white
	bgColour = colours.black
end

local parentTerm = term.current()

term.setBackgroundColor(bgColour)
term.setTextColour(promptColour)
print(os.version())
term.setTextColour(textColour)

loadfile('test.lua')(1)

Mov:trackLocation('.mov.tbl')

info('Loading skills')
skillSet = SkillSet.GetDefaultSkillSet()
info(skillSet:getSkillCount() .. ' slills')

info('Loading TaskManager')
taskManager = TaskManager()
pcall(
	function()
		taskManager:load('data/tasks')
	end
)

local bExit = false

-- Read commands and execute them
local tCommandHistory = {}
while not bExit do
	term.redirect(parentTerm)
	term.setBackgroundColor(bgColour)
	term.setTextColour(promptColour)
	write(shell.dir() .. '> ')
	term.setTextColour(textColour)

	local sLine
	if settings.get('shell.autocomplete') then
		sLine = read(nil, tCommandHistory, shell.complete)
	else
		sLine = read(nil, tCommandHistory)
	end
	if (sLine == 'exit') then
		bExit = true
	else
		table.insert(tCommandHistory, sLine)
		shell.run(sLine)
	end
end

hud:stop()

shell.exit()
