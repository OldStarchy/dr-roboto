if (_G.osStarted == true) then
	suppressMissingGlobalWarnings(false)

	print('Running startup in 2 seconds')
	term.write('Press enter to skip ... ')

	term.setCursorBlink(true)
	local tid = os.startTimer(2)

	local event, id = os.pullEvent()
	local wait = true
	while (wait) do
		if (event == 'timer' and id == tid) then
			print('running')
			shell.run('less run test')
			break
		elseif (event == 'key' and id == 28) then
			print('skipping')
			break
		end
		event, id = os.pullEvent()
	end

	runAndPrintErrLines(
		function()
			ItemInfo.Instance = ItemInfo()
			ItemInfo.Instance:loadHardTable('item.dictionary')

			RecipeBook.Instance = RecipeBook.LoadFromFile('recipe.dictionary.tbl', true)
			include 'Crafting/StandardRecipes'

			if (fs.exists('mystartup.lua')) then
				dofile('mystartup.lua')
			end
		end
	)
	return
end

-- Print call logging
-- local oldPrint = print
-- _G.print = function(...)
-- 	local st = getStackTrace(1, 2)[1]
-- 	oldPrint(st, ...)
-- end
-- _G.osStarted = true

if (os.version == nil) then
	dofile 'bootstrap.lua'
	loadfile('test.lua')(1)
	return
end

term.clear()
term.setCursorPos(1, 1)

if (settings ~= nil) then
	if (multishell ~= nil) then
		settings.set('bios.use_multishell', false)
		settings.save('.settings')
		os.reboot()
	end
end

local osshutdown = os.shutdown
local osrun = os.run

os.shutdown = function()
	os.shutdown = osshutdown
	os.run = osrun

	local ok, err =
		pcall(
		function()
			dofile 'bootstrap.lua'

			dofile 'os.lua'
		end
	)

	-- If the shell errored, let the user read it.
	term.redirect(term.native())
	if not ok then
		printError(err)
		printStackTrace(4)
		pcall(
			function()
				term.setCursorBlink(false)
				print('Press any key to continue')
				os.pullEvent('key')
			end
		)
	end

	os.shutdown()
end

os.run = function(...)
end

shell.exit()
